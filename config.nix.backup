{ config, lib, pkgs, inputs,... }:

### SPLIT IN MULTIPLE FILES 
# let
#   costumGroup = "c5e4d2ed-6f5b-4efe-831f-5ae93010fe4a";
#   defaultId = "fe0de0e1-cf81-4d6f-b1f1-f1ecc42d07bb";
#   subnetDefaultOci = "ocid1.subnet.oc1.eu-milan-1.aaaaaaaacc3ifofytrjoy4ajyc2c6nwr3iuyl7yk4fqxabemaedryw67zlzq";
# in
{
  imports = [
    ./hosts/openstack.nix
    ./hosts/oracle.nix
  ];
  
  ## Enable sops provider
  terraform.required_providers.sops.source = "carlpett/sops";
  ## Enable oracle cloud provider
  terraform.required_providers.oci.source = "oracle/oci";

  ## openstack secrets
  data.sops_file.openstack = {
    source_file = "openstack_secrets.yaml";
  };
  
  ## oci secrets
  data.sops_file.oci = {
    source_file = "oci_secrets.yaml";
  };

  ## configure admin ssh keys
  users.admins.pek.publicKey = "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILCmIz2Selg5eJ77lvpJHgDJiRIOZbucMjDK5zrhTEWK heph@fenrir";

  ## Retrieve availability domain and images
  data.oci_identity_availability_domain.ad = {
    compartment_id = ''''${data.sops_file.oci.data["oci.tenancy"]}'';
    ad_number = 1;
  };

  data.oci_core_images.ubuntu-20-04 = {
    compartment_id = ''''${data.sops_file.oci.data["oci.tenancy"]}'';
    operating_system = "Canonical Ubuntu";
    filter = {
      name = "display_name";
      values = ["^Canonical-Ubuntu-20.04-([\\.0-9-]+)$"];
      regex = true;
    };
  };

  ## Retrieve subnet
  data.oci_core_subnet.default_sub = {
    subnet_id = subnetDefaultOci;
  };

  # data.template_file.cloud-config = {
  #   template = "<<YAML
  #   #cloud-config
  #   runcmd:
  #     - sed -i 's/^.*ssh-/ssh-/g' /root/.ssh/authorized_keys
  #     - curl https://raw.githubusercontent.com/elitak/nixos-infect/master/nixos-infect | NIX_CHANNEL=nixos-21.11 bash -x
  #   YAML";
  # };

  ###################################
  #         Oracle VMs              #
  ###################################
  
  ## Enable oracle provider
  provider.oci = {
    tenancy_ocid = ''''${data.sops_file.oci.data["oci.tenancy"]}'';
    user_ocid = ''''${data.sops_file.oci.data["oci.user"]}'';
    private_key = ''''${data.sops_file.oci.data["oci.private_key"]}'';
    region = "eu-milan-1";
  };

  ## AMD Always free resource
  resource.oci_core_instance.free_instance_AMD0 = {
    availability_domain = ''''${data.oci_identity_availability_domain.ad.name}'';
    compartment_id = ''''${data.sops_file.oci.data["oci.tenancy"]}'';
    display_name = "freeInstance0";
    shape = "VM.Standard.E2.1.Micro";

    create_vnic_details = {
      subnet_id = ''''${data.oci_core_subnet.default_sub.id}'';
      display_name = "primaryvnic";
      assign_public_ip = true;
      hostname_label = "freeinstance0";
    };

    source_details = {
      source_type = "image";
      source_id   = "ocid1.image.oc1.eu-milan-1.aaaaaaaakv4wkaruajtxpwoben4terryml4lr3wtnpb5hz74mawsexsge2wa";
    };

    metadata.ssh_authorized_keys = "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILCmIz2Selg5eJ77lvpJHgDJiRIOZbucMjDK5zrhTEWK heph@fenrir";
    ## Cloud-init that enable root ssh
    #    metadata.user_data = ''''${base64encode(data.template_file.cloud-config.rendered)}'';
    metadata.user_data = ''''${base64encode(file("./boot.sh"))}'';
  };
  
  openstack = {
    enable = true;
    provider = {
      authUrl = "https://keystone.cloud.garr.it:5000/v3";
      credId = ''''${data.sops_file.openstack.data["openstack.app_id"]}'';
      credSecret = ''''${data.sops_file.openstack.data["openstack.sec_id"]}'';
      region = "garr-pa1";
    };
    server = {
      "kelpie" = {
        enable = true;
        name = "kelpie";
        image = "NixOS 21 11"; # this is a costum image built using ./nixos/images/image21.11.nix and nixos-generate
        flavor = "m1.medium";
        networkId = "fe0de0e1-cf81-4d6f-b1f1-f1ecc42d07bb";
        securityGroups = ["c5e4d2ed-6f5b-4efe-831f-5ae93010fe4a"];
      };
      "axel" = {
        enable = true;
        name = "axel";
        image = "NixOS 21 11";
        flavor = "m1.medium"; # 4GB Ram, 2vCPU, 80GB Storage
        networkId = defaultId;
        securityGroups = [ costumGroup ];        
      };
    };

    ## create a file which contains the outputs from terraform
    export.nix = "./nixos/machines/nixos-machines.nix";
  };
}
